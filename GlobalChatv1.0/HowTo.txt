We will build a basic chat application today.
Traditionally Sockets have been the solution for realtime chat systems, providing bi-directional communication channel b/w
client and server.

Step 1: Create an empty directory - GlobalChatv1.0 and an empty file package.json
Within this file enter the following json object literal.

//
{
    "name": "socket-chat-example",
    "version": "0.0.1",
    "description": "My first socket.io application",
    "dependencies": { }
}
//

It has name, version, description (of application) and empty dependencies literal as properties.

Step 2: You have to install all the dependencies required by this application like express, socket.io type below command.
Let's start with express dependency.
//
npm install --save express@4.15.2
//

Step 3: Node.js package express is installed, Next we create another file index.js and enter following piece of code.

//
var app = require('express')();
var http = require('http').Server(app);

app.get('/', function(req, res){
  res.send('<h1>Hello world</h1>');
});

http.listen(3000, function(){
  console.log('listening on *:3000');
});
//

In above code, we imported 'express' module and stored it in 'app' variable. Next we imported 'http' core module and supplied
'app' to http server.
We defined a route handler '/' that gets called when we hit our website home.
Next we make the http server listen to port 3000.

Step 4: Finally run index.js as
            > Node index.js
and direct your browser to http://localhost:3000/

Step 5: In following code,

//
app.get('/', function(req, res){
  res.send('<h1>Hello world</h1>');
});
//

We are calling res.send() function and sending a simple html line '<h1>Hello World</h1>'. What if I want to send something more?
We can use another function res.sendFile() and send the whole html document via this function.

Create a new html document in the same directory. >> index.html and copy the code below.
//
<!doctype html>
<html>
  <head>
    <title>Socket.IO chat</title>
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; }
      body { font: 13px Helvetica, Arial; }
      form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
      form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
      form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages li { padding: 5px 10px; }
      #messages li:nth-child(odd) { background: #eee; }
    </style>
  </head>
  <body>
    <ul id="messages"></ul>
    <form action="">
      <input id="m" autocomplete="off" /><button>Send</button>
    </form>
  </body>
</html>
//

Next to send this file at port 3000 and route handler '/', copy the code below to index.js and replace earlier handler.
//
app.get('/', function(req, res){
    res.sendFile(__dirname + '\\index.html');
});
//

Step 6: Next we integrate socket.io to our application.
SOCKET.IO is composed of two parts,
    > A server that integrates with (or mounts on) the Node.js HTTP server: socket.io
    > A client library that loads on the browser side: socket.io-client

Install below module
    > npm install --save socket.io

That will install the module and add the dependency to package.json. Now let's edit index.js
//
var app = require('express')();
var http = require('http').Server(app);
var io = require('socket.io')(http);

app.get('/', function(req, res){
  res.sendFile(__dirname + '/index.html');
});

io.on('connection', function(socket){
  console.log('a user connected');
});

http.listen(3000, function(){
  console.log('listening on *:3000');
});
//

So here is the new index.js (update)
//
// We import express core module and store it in app variable.
// Next we imported http module and supply the express app variable to HTTP Server.
var app = require('express')();
var http = require('http').Server(app);

// We initialized a new instance of socket.io by passing the http object.
var io = require('socket.io')(http);


// We define a route handler '/' that gets called when we hit our website home.
app.get('/', function(req, res){
    res.sendFile(__dirname + '\\index.html');
});

// We listen on the connection event for incoming sockets, and logs it on console.
io.on('connection', function(socket){
    console.log('New User Connected!');
});

// We make the http server listen on port 3000
http.listen(3000, function(){
  console.log('listening on *:3000');
});
//

Step 7: Next we load socket.io-client.
Add the following code in index.html above the </body> tag.
//
<script src="/socket.io/socket.io.js"></script>
<script>
  var socket = io();
</script>
//

That's it, you have successfully loaded socket.io-client, which exposes a 'io' global, and then connect.
Now if you reload the tab or open new tab it will print "New User Connected!" on console.

Step 8: Next we add a feature of user disconnect prompt. Everytime an user disconnect it prints to console.
Edit the below snipped to index.js
//
io.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
});
//

Step 9: Printing messages to console. Emitting events.
With Socket.IO you can send/ receive any events you want, with any data format you want. Any objects that can be encoded
as JSON will do, and binary data is supported too.
Now when user types a message, server gets it as a "chat message" event.
Edit the following code to index.html
//
<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<script>
  $(function () {
    var socket = io();
    $('form').submit(function(){
      socket.emit('chat message', $('#m').val());
      $('#m').val('');
      return false;
    });
  });
</script>
//

and edit in index.js too which prints out "chat message" event.
// We listen on the connection event for incoming sockets, and logs it on console.
io.on('connection', function(socket){
  socket.on('chat message', function(msg){
    console.log('message: ' + msg);
  });
});
//

Step 10: Broadcasting
Emit the events from server to the rest of the users.
We will add the below code to index.js, which sends the message to everyone including the sender.
//
io.on('connection', function(socket){
  socket.on('chat message', function(msg){
    io.emit('chat message', msg);
  });
});
//

And on the client side when we capture a "chat message" event we will print it on page.
The total client side script now amounts too.
//
 <script src="/socket.io/socket.io.js"></script>
 <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
 <script>
    $(function () {
      var socket = io();
      $('form').submit(function(){
        socket.emit('chat message', $('#m').val());
        $('#m').val('');
        return false;
      });
      socket.on('chat message', function(msg){
        $('#messages').append($('<li>').text(msg));
      });
    });
  </script>
//

So, in order to send an event to everyone, Socket.IO gives us the io.emit:
//
io.emit('some event', { for: 'everyone' });
//

If you want to send a message to everyone except for a certain socket, Socket.IO have the broadcast flag:
//
io.on('connection', function(socket){
  socket.broadcast.emit('hi');
});
//